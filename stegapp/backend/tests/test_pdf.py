"""
Tests pour le module de st√©ganographie PDF.
"""

import pytest
import io
from PyPDF2 import PdfWriter, PdfReader
from stego.pdf_meta import PDFSteganography


@pytest.fixture
def test_pdf():
    """Cr√©e un PDF de test."""
    # Cr√©er un PDF simple
    writer = PdfWriter()
    
    # Ajouter une page vide (PyPDF2 n√©cessite au moins une page)
    from PyPDF2.pdf import PageObject
    page = PageObject.create_blank_page(width=612, height=792)
    writer.add_page(page)
    
    # Sauvegarder en m√©moire
    buffer = io.BytesIO()
    writer.write(buffer)
    return buffer.getvalue()


@pytest.fixture
def stego_instance():
    """Instance de PDFSteganography."""
    return PDFSteganography()


def test_hide_and_extract_without_password(stego_instance, test_pdf):
    """Test de base : cacher et extraire des donn√©es sans mot de passe."""
    test_data = "Hello, PDF World!"
    
    # Cacher les donn√©es
    modified_pdf = stego_instance.hide_data(test_pdf, test_data)
    
    # Extraire les donn√©es
    extracted_data = stego_instance.extract_data(modified_pdf)
    
    assert extracted_data == test_data


def test_hide_and_extract_with_password(stego_instance, test_pdf):
    """Test avec mot de passe : cacher et extraire des donn√©es avec chiffrement."""
    test_data = "Secret PDF message"
    password = "pdf_secret"
    
    # Cacher les donn√©es
    modified_pdf = stego_instance.hide_data(test_pdf, test_data, password)
    
    # Extraire les donn√©es
    extracted_data = stego_instance.extract_data(modified_pdf, password)
    
    assert extracted_data == test_data


def test_hide_with_wrong_password(stego_instance, test_pdf):
    """Test avec mauvais mot de passe."""
    test_data = "Secret PDF data"
    correct_password = "correct"
    wrong_password = "wrong"
    
    # Cacher avec le bon mot de passe
    modified_pdf = stego_instance.hide_data(test_pdf, test_data, correct_password)
    
    # Essayer d'extraire avec le mauvais mot de passe
    with pytest.raises(Exception):
        stego_instance.extract_data(modified_pdf, wrong_password)


def test_no_hidden_data(stego_instance, test_pdf):
    """Test d'extraction sur un PDF sans donn√©es cach√©es."""
    with pytest.raises(ValueError, match="Aucune donn√©e cach√©e trouv√©e"):
        stego_instance.extract_data(test_pdf)


def test_no_metadata(stego_instance):
    """Test d'extraction sur un PDF sans m√©tadonn√©es."""
    # Cr√©er un PDF sans m√©tadonn√©es
    writer = PdfWriter()
    from PyPDF2.pdf import PageObject
    page = PageObject.create_blank_page(width=612, height=792)
    writer.add_page(page)
    
    buffer = io.BytesIO()
    writer.write(buffer)
    pdf_without_metadata = buffer.getvalue()
    
    with pytest.raises(ValueError, match="Aucune m√©tadonn√©e trouv√©e"):
        stego_instance.extract_data(pdf_without_metadata)


def test_get_capacity(stego_instance, test_pdf):
    """Test du calcul de capacit√©."""
    capacity = stego_instance.get_capacity(test_pdf)
    
    # La capacit√© des m√©tadonn√©es PDF est fix√©e √† 64KB
    assert capacity == 65536


def test_unicode_data(stego_instance, test_pdf):
    """Test avec des donn√©es Unicode."""
    test_data = "PDF ‰∏ñÁïå! üìÑ"
    
    modified_pdf = stego_instance.hide_data(test_pdf, test_data)
    extracted_data = stego_instance.extract_data(modified_pdf)
    
    assert extracted_data == test_data


def test_empty_data(stego_instance, test_pdf):
    """Test avec des donn√©es vides."""
    test_data = ""
    
    modified_pdf = stego_instance.hide_data(test_pdf, test_data)
    extracted_data = stego_instance.extract_data(modified_pdf)
    
    assert extracted_data == test_data


def test_large_data(stego_instance, test_pdf):
    """Test avec des donn√©es volumineuses mais dans la limite."""
    # Cr√©er des donn√©es proches de la limite
    test_data = "x" * 1000  # 1KB, bien dans la limite de 64KB
    
    modified_pdf = stego_instance.hide_data(test_pdf, test_data)
    extracted_data = stego_instance.extract_data(modified_pdf)
    
    assert extracted_data == test_data


def test_multiline_data(stego_instance, test_pdf):
    """Test avec des donn√©es multilignes."""
    test_data = """Ligne 1
Ligne 2
Ligne 3 avec des caract√®res sp√©ciaux: √©√†√ß√π
Et des symboles: !@#$%^&*()"""
    
    modified_pdf = stego_instance.hide_data(test_pdf, test_data)
    extracted_data = stego_instance.extract_data(modified_pdf)
    
    assert extracted_data == test_data
